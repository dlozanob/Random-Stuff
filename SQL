// Fields are the titles of the columns, rows are called records
// A table is an arrangement of related data
// A database contains one or more tables
// Each SQL command-line contains a ';' at the end

// Main statements:

SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index


SELECT <field> FROM <table>; // The select command shows an specified column from a table, Use '*' for all.
SELECT <field1>, <field2> FROM <table>; // Selecting multiple fields at once.

// Fields and statements are not case-sensitive.

SELECT DISTINCT <field> FROM <table>; // The 'DISTINCT' statement removes duplicated values.
SELECT COUNT(DISTINCT <field>) FROM <table>; // Returns the number of records that are different each other.

// The 'WHERE' clause is used for requirements specifying a condition.

SELECT * FROM Customers WHERE Country='Mexico'; // Selects all the records whose country is Mexico.
// The example is in the form: SELECT * FROM <table> WHERE <field>='<value>'
// Numeric values are not enclosed in quotes.

// Operators used in the WHERE clause:
=	            Equal	
>	            Greater than	
<	            Less than	
>=	          Greater than or equal	
<=	          Less than or equal	
<>	          Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	      Between a certain range	
LIKE	        Search for a pattern	
IN	          To specify multiple possible values for a column

// We can use the 'NOT', 'AND', 'OR' operators to set a conditional

SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München'); // Will display customers whose country is Germany and whose city is Berlin or München.

// The ORDER keyword is used to sort the information. It could be ASC (ascendent) or DESC (descendant). Ascendant order by default.

SELECT <field> FROM <table> ORDER BY <field> ASC|DESC;
SELECT * FROM Customers ORDER BY Country DESC; // We are sorting descendant alphabetically by country in this example.
SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC; // For duplicated cases it'll take descendant alphabetically order based on CustomerName field.

// The 'INSERT INTO' statement adds data to a table
INSERT INTO <table> (<field1>, <field2>, ...) VALUES (<value1>, <value2>, ...)
// If no values are specified for any field, then that value will be null by default.
INSERT INTO <table> VALUES (<value1>, <value2>, ...); // It is possible as well to just specify the values so they will fill the columns in order.

// The 'IS NULL' operator tell us if a value is null.
SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NULL; // Example using the NULL operator.
// It is possible to use it with the 'NOT' operator.

// The 'UPDATE' statement modifies data from a record.
UPDATE <table> SET <field1> = <value1>, <field2> = <value2>, ... WHERE <condition>;
UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;

// We can delete existing records from a table by using the 'DELETE' statement.
DELETE FROM <table> WHERE <condition>;
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
// If no condition specified we'll delete all the records from a table.

// The 'SELECT TOP' clause is used to specify the number of records to return.
// MySQL supports the 'LIMIT' clause to select a limited number of records, while Oracle uses 'FETCH FIRST n ROWS ONLY' and 'ROWNUM'.
SELECT TOP <n records to show> <field> FROM <table>;
// The 'LIMIT' clause is used for the same purposes.
SELECT <field> FROM <table> LIMIT <n records to show>;
// In Oracle the equivalent is:
SELECT <field> FROM <table> FETCH FIRST <n records to show> ROWS ONLY;

// Displaying a percent of records:
SELECT TOP <percentage of records to show> PERCENT <field> FROM <table>; // SQL Server/MS Access option.
SELECT <field> FROM <table> FETCH FIRST <percentage of records to show> PERCENT ROWS ONLY; // Oracle option.

SELECT * FROM Customers WHERE Country='Germany' LIMIT 3; // Example using a condition.

// The 'MAX()' and 'MIN()' functions returns the maximum and minimum values respectively for a given field.
SELECT MIN(<field>) FROM <table> WHERE <condition>;
SELECT MIN(Price) AS SmallestPrice FROM Products; // Returns the minimum value of the Price column, and the title of the output is 'SmallestPrice'.

// The 'COUNT()' function returns the number of records for a specified field.
SELECT COUNT(<field>) FROM <table> WHERE <condition>;

// For getting the average of the values in a column, we use the 'AVG()' function.
SELECT AVG(<field>) FROM <table> WHERE <condition>;

// The 'SUM()' function returns the total sum of a numeric column. 
SELECT SUM(<field>) FROM <table> WHERE <condition>;
// If we take an alphabetic column for these functions, the output will be 0.

// The 'LIKE' clause is used for specifying patterns.
SELECT * FROM <table> WHERE <field> LIKE <pattern>;
// Some wildcards are used in patterns. '%' for 0, 1 or more characters, '_' for only 1 character.
SELECT * FROM Customers WHERE ContactName LIKE 'a_%o'; // The words must starts with a, there is at least 2 characters, then we can find any length after those 2.
SELECT * FROM Customers WHERE City NOT LIKE 'a%'; // All the city records that don't start with the letter 'a'. 

// Another wildcars are:
// MS Access wildcards:
*	      Represents zero or more characters
?	      Represents a single character
[]	    Represents any single character within the brackets
!	      Represents any character not in the brackets
-	      Represents any single character within the specified range
#	      Represents any single numeric character

// SQL Server wildcards:
%	      Represents zero or more characters
_	      Represents a single character
[]	    Represents any single character within the brackets
^	      Represents any character not in the brackets
-	      Represents any single character within the specified range

// The 'IN' statement allows to put different parameters to the 'WHERE' clause.
SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK'); // Country must be one of those countries for selecting.
SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers); // Selecting countries that belongs to Customers and Suppliers tables.

// The 'BETWEEN' statement select an inclusive range of numbers, text or dates.
SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20; // Not between that numeric range.
SELECT * FROM Products WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' ORDER BY ProductName; // Text range alphabetically.
SELECT * FROM Orders WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#; // Range for dates.
SELECT * FROM Orders WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31'; // Also we can enclose dates with ''.


// We can set aliases to columns or tables in order to make it easy to write statements and read data.
// An alias only exists for the duration of that query.
// The 'AS' keyword sets aliases.
SELECT <field> AS <field_alias> FROM <table>; // Setting an alias to a field.
SELECT <field> FROM <table> AS <table_alias>; // Setting an alias to a table.
SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers; // The programm will displays the name of those fields as their alias.
SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers; // If an alias contains spaces we use square brackets.
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address FROM Customers; // We are putting together the Adress, PostalCode, City and Country columns in one. That combined column is aliased 'Adress'.
SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address FROM Customers; // Doing the same as above for MySQL.
SELECT o.OrderID, o.OrderDate, c.CustomerName FROM Customers AS c, Orders AS o WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID; // Here are 2 tables, we define aliases for them, and reference those tables through their aliases.
SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName FROM Customers, Orders WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID; // Extended alternative without aliases.

// The 'JOIN' clause is used to combine rows from two or more tables.






















